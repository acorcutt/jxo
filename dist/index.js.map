{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const defaultObjectEncoder = (obj, key, next, withRef) =>\n  withRef(() => {\n    return {\n      $: key,\n      _: Object.entries(obj).reduce((acc, [key, _obj]) => {\n        return { ...acc, [key]: next(_obj) };\n      }, {}),\n    };\n  });\n\nconst defaultObjectDecoder = (Type) => {\n  const obj = new Type(); // Use detected type for reuseabilty\n  return [\n    (json, next) => {\n      return Object.entries(json).reduce((_obj, [key, value]) => {\n        _obj[key] = next(value);\n        return _obj;\n      }, obj);\n    },\n    obj,\n  ];\n};\n\n/**\n * Build a handler for Objects or Classes that just sets and gets props\n * @param {String} key\n * @param {*} Type\n */\nexport function createObjectHandler(key = 'Object', Type = Object) {\n  return {\n    [key]: [Type, defaultObjectEncoder, defaultObjectDecoder],\n  };\n}\n\n/**\n * Build a handler for Objects that can be stringified and parsed e.g. new BigInt('0') == new BigInt(String(new BigInt(0)))\n * @param {String} key\n * @param {*} Type\n */\nexport function createStringifiedHandler(key, Type) {\n  return {\n    [key]: [Type, (obj, key) => ({ $: key, _: String(obj) }), (Type) => [(json) => Type(json)]],\n  };\n}\n\nexport function createTypedArrayHandler(key, Type) {\n  return {\n    [key]: [Type, (obj, key) => ({ $: key, _: Array.from(obj) }), (Type) => [(json) => new Type(json)]],\n  };\n}\n/**\n * This is used to map references to objects which are not serializable\n * e.g. Symbols and Functions\n *\n * @param {Object} refs - { KEY: Symbol } mapping\n * @param {String} key - Key to store in JSON\n * @param {*} Type - Type to match when calling obj.constructor of refs objects\n */\nexport function createReferencesHandler(refs = {}, key = 'Symbol', Type = Symbol) {\n  // Swap refs key -> symbol to symbol -> key\n  const symbols = Object.entries(refs).reduce((map, [_key, sym]) => {\n    return map.set(sym, _key);\n  }, new Map());\n  return { [key]: [Type, (obj, key) => ({ $: key, _: symbols.get(obj) }), () => [(json) => refs[json]]] };\n}\n\n// Object -> JSON\nconst defaultEncoder = (obj) => obj;\n// JSON -> Object\nconst defaultDecoder = () => [(json) => json];\n\nconst defaultTypes = {\n  // Handle decoding Undefined objects\n  Undefined: [class Undefined {}],\n\n  // Simple types\n  Boolean: [Boolean],\n  String: [String], // TODO - optional encoding if set\n  Number: [Number, (obj, key) => (Number.isFinite(obj) ? obj : { $: key, _: String(obj) }), () => [(json) => Number(json)]],\n\n  // Extended types\n  ...createStringifiedHandler('BigInt', BigInt),\n  BigInt64Array: [BigInt64Array, (obj, key, next) => ({ $: key, _: Array.from(obj).map(next) }), (Type) => [(json, next) => new Type(json.map(next))]],\n  BigUint64Array: [BigUint64Array, (obj, key, next) => ({ $: key, _: Array.from(obj).map(next) }), (Type) => [(json, next) => new Type(json.map(next))]],\n\n  Date: [Date, (obj, key) => ({ $: key, _: obj.toISOString() }), (Type) => [(json) => new Type(json)]],\n  RegExp: [RegExp, (obj, key) => ({ $: key, _: { source: obj.source, flags: obj.flags } }), (Type) => [(json) => new Type(json.source, json.flags)]],\n\n  // Typed Arrays\n  ...createTypedArrayHandler('Uint8Array', Uint8Array),\n  ...createTypedArrayHandler('Uint8ClampedArray', Uint8ClampedArray),\n  ...createTypedArrayHandler('Int8Array', Int8Array),\n  ...createTypedArrayHandler('Uint16Array', Uint16Array),\n  ...createTypedArrayHandler('Int16Array', Int16Array),\n  ...createTypedArrayHandler('Uint32Array', Uint32Array),\n  ...createTypedArrayHandler('Int32Array', Int32Array),\n  ...createTypedArrayHandler('Float32Array', Float32Array),\n  ...createTypedArrayHandler('Float64Array', Float64Array),\n\n  // Objects that support circular references or references to other objects\n  Array: [\n    Array,\n    (obj, _, next, withRef) => withRef(() => obj.map(next)),\n    (Type) => {\n      // Create object first so we can reference it before recursion\n      const array = new Type();\n      return [\n        (json, next) =>\n          json.reduce((_arr, obj) => {\n            _arr.push(next(obj));\n            return _arr;\n          }, array),\n        array,\n      ];\n    },\n  ],\n  Set: [\n    Set,\n    (obj, key, next, withRef) => withRef(() => ({ $: key, _: Array.from(obj).map(next) })),\n    (Type) => {\n      const set = new Type();\n      return [\n        (json, next) =>\n          json.reduce((_set, obj) => {\n            _set.add(next(obj));\n            return _set;\n          }, set),\n        set,\n      ];\n    },\n  ],\n  Map: [\n    Map,\n    (obj, key, next, withRef) => withRef(() => ({ $: key, _: Array.from(obj).map(next) })),\n    (Type) => {\n      const map = new Type();\n      return [\n        (json, next) =>\n          json.reduce((_map, [key, obj]) => {\n            // NOTE - keys can be Objects so recurse\n            _map.set(next(key), next(obj));\n            return _map;\n          }, map),\n        map,\n      ];\n    },\n  ],\n  ...createObjectHandler(),\n};\n\nfunction _objectToJson(obj, types, refs, fallback) {\n  // These do not have constructors\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return { $: 'Undefined' };\n  }\n\n  const type = types.get(obj.constructor);\n\n  if (type) {\n    const [key, get = defaultEncoder] = type;\n    return get(\n      obj,\n      key,\n      /* next */ (_obj) => _objectToJson(_obj, types, refs, fallback),\n      /* withRef*/ (fn) => {\n        // If we have a reference to this object, use it\n        if (refs.includes(obj)) {\n          return { $: refs.indexOf(obj) };\n        } else {\n          // Store Object ref\n          refs.push(obj);\n          // Return from type builder\n          return fn();\n        }\n      }\n    );\n  } else {\n    return fallback(obj);\n  }\n}\n\nfunction _jsonToObject(json, types, typesMap, refs, fallback) {\n  // Types without constructor\n  if (json === null) {\n    return null;\n  }\n  // undefined is not valid JSON maybe should throw error\n  if (json === undefined) {\n    return undefined;\n  }\n\n  // Self-References are Objects with integer $ keys\n  if (json.constructor === Object && Number.isInteger(Number.parseInt(json.$))) {\n    return refs[Number.parseInt(json.$)];\n  }\n\n  // Native types\n  if (json.constructor === Object || json.constructor === Array || json.constructor === String || json.constructor === Number || json.constructor === Boolean) {\n    const [_, __, decoder = defaultDecoder] = (json.constructor === Object ? types[json.$] : typesMap.get(json.constructor)) || [];\n    const [fn, ref] = decoder(json.constructor === Object ? (types[json.$] || defaultDecoder)[0] : json.constructor);\n    // Push ref before recursion\n    if (ref) {\n      refs.push(ref);\n    }\n    // Build recuresive function handler can call\n    const next = (json) => _jsonToObject(json, types, typesMap, refs, fallback);\n    // Call jsonToObject handler\n    if (json.constructor === Object) {\n      return fn(json._, next);\n    } else {\n      return fn(json, next);\n    }\n  }\n\n  // TODO - Should we error instead on invalid json?\n  return undefined;\n}\n\nexport function jsonify(\n  obj,\n  types = {},\n  fallback = (obj) => ({\n    $: obj.constructor.name,\n  })\n) {\n  // TODO - can we validate types here if not too expensive?\n  return _objectToJson(\n    obj,\n    Object.entries({ ...defaultTypes, ...types }).reduce((map, [key, [type, get, set]]) => {\n      return map.set(type, [key, get, set]);\n    }, new Map()),\n    [],\n    fallback\n  );\n}\n\nexport function objectify(json, types = {}, fallback = (json) => json) {\n  // TODO - can we validate types here if not too expensive?\n  return _jsonToObject(\n    json,\n    { ...defaultTypes, ...types },\n    Object.entries({ ...defaultTypes, ...types }).reduce((map, [key, [type, get, set]]) => {\n      return map.set(type, [key, get, set]);\n    }, new Map()),\n    [],\n    fallback\n  );\n}\n\nexport function stringify(obj, types = {}) {\n  return JSON.stringify(jsonify(obj, types));\n}\n\nexport function parse(str, types = {}) {\n  return objectify(JSON.parse(str), types);\n}\n\nexport class JxO {\n  constructor(types = {}) {\n    this.types = types;\n  }\n  stringify(obj) {\n    return stringify(obj, this.types);\n  }\n  parse(str) {\n    return parse(str, this.types);\n  }\n\n  jsonify(obj) {\n    return jsonify(obj, this.types);\n  }\n\n  objectify(json) {\n    return objectify(json, this.types);\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map"}